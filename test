// auth.interceptor.ts
import {
  HttpEvent,
  HttpHandler,
  HttpInterceptor,
  HttpRequest,
  HttpErrorResponse,
} from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { MatDialog } from '@angular/material/dialog';
import { LoginDialogComponent } from './login-dialog/login-dialog.component';

@Injectable()
export class AuthInterceptor implements HttpInterceptor {
  private isDialogOpen = false;

  constructor(private dialog: MatDialog) {}

  intercept(
    req: HttpRequest<any>,
    next: HttpHandler
  ): Observable<HttpEvent<any>> {
    return next.handle(req).pipe(
      catchError((error: HttpErrorResponse) => {
        if (error.status === 401 && !this.isDialogOpen) {
          this.isDialogOpen = true;
          const dialogRef = this.dialog.open(LoginDialogComponent, {
            width: '400px',
            disableClose: true,
          });

          dialogRef.afterClosed().subscribe(() => {
            this.isDialogOpen = false;
          });
        }

        return throwError(() => error);
      })
    );
  }
}
